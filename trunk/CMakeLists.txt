cmake_minimum_required(VERSION 2.6)
project(erszebet C)

set(P ${PROJECT_NAME})

add_subdirectory(3rd)
add_subdirectory(tools)

set(${P}_MAJOR_VERSION 0)
set(${P}_MINOR_VERSION 1)
set(${P}_PATCH_LEVEL   0)

option(WITH_IMAGE_PNG  "PNG image format support" ON)
option(WITH_IMAGE_JPEG "JPEG image format support" ON)
option(WITH_SND        "enable sound" ON)
option(WITH_SND_WAV    "WAV audio format support" ON)
option(WITH_SND_OGG    "OGG VORBIS audio format support" ON)
option(WITH_SND_FLAC   "FLAC audio format support" ON)

option(DEBUG                 "debug build" OFF)
option(DEBUG_SYS_PRINTF      "print debug messages" ON)
option(DEBUG_SYS_PRINTF_LOC  "print location in debug messages" ON)
option(DEBUG_SYS_PRINTF_TIME "print timestamp in debug messages" OFF)

option(DEBUG_SND "debug sound" ON)
option(DEBUG_GL  "debug opengl" ON)
option(DEBUG_MEM "debug memory manager" ON)

add_definitions(-W -Wall -std=c99 -DGAME_NAME="${P}")

if(DEBUG)
  add_definitions(-DDEBUG=1)
  if(DEBUG_SYS_PRINTF)
    add_definitions(ENGINE_SYS_PRINTF)
    if(DEBUG_SYS_PRINTF_LOC)
      add_definitions(ENGINE_SYS_PRINTF_LOCATION)
    endif(DEBUG_SYS_PRINTF_LOC)
    if(DEBUG_SYS_PRINTF_TIME)
      add_definitions(ENGINE_SYS_PRINTF_TIMESTAMP)
    endif(DEBUG_SYS_PRINTF_TIME)
  endif(DEBUG_SYS_PRINTF)
  if(DEBUG_SND)
    add_definitions(ENGINE_SND_DEBUG)
  endif(DEBUG_SND)
  if(DEBUG_GL)
    add_definitions(ENGINE_GL_DEBUG)
  endif(DEBUG_GL)
  if(DEBUG_MEM)
    add_definitions(ENGINE_MEM_DEBUG)
  endif(DEBUG_MEM)
else(DEBUG)
  add_definitions(-DRELEASE=1)
endif(DEBUG)

file(GLOB SRC_FILES *.c)
add_executable(${P} ${SRC_FILES})
add_dependencies(${P} chipmunk)
add_dependencies(${P} lua)
target_link_libraries(${P} chipmunk lua)

include(FindOpenGL)
if(OPENGL_FOUND)
  include_directories(${OPENGL_INCLUDE_DIR})
  target_link_libraries(${P} ${OPENGL_gl_LIBRARY})
else(OPENGL_FOUND)
  message(FATAL_ERROR "OpenGL not found")
endif(OPENGL_FOUND)

include(FindSDL)
if(SDL_FOUND)
  include_directories(${SDL_INCLUDE_DIR})
  target_link_libraries(${P} ${SDL_LIBRARY})
  add_definitions(-DENGINE_VIDEO_SDL)
else(SDL_FOUND)
  message(FATAL_ERROR "SDL not found")
endif(SDL_FOUND)

if(WITH_IMAGE_PNG)
  include(FindPNG)
  if(PNG_FOUND)
    include_directories(${PNG_INCLUDE_DIR})
    target_link_libraries(${P} ${PNG_LIBRARIES})
    add_definitions(-DENGINE_IMAGE_PNG ${PNG_DEFINITIONS})
  endif(PNG_FOUND)
endif(WITH_IMAGE_PNG)

if(WITH_IMAGE_JPEG)
  include(FindJPEG)
  if(JPEG_FOUND)
    include_directories(${JPEG_INCLUDE_DIR})
    target_link_libraries(${P} ${JPEG_LIBRARIES})
    add_definitions(-DENGINE_SND)
  endif(JPEG_FOUND)
endif(WITH_IMAGE_JPEG)

if(WITH_SND)
  include(FindOpenAL)
  if(OPENAL_FOUND)
    include_directories(${OPENAL_INCLUDE_DIR})
    target_link_libraries(${P} ${OPENAL_LIBRARY})
    add_definitions()
  endif(OPENAL_FOUND)
endif(WITH_SND)
