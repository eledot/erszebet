diff -ruiN chip_209/cpBody.c chip/cpBody.c
--- chip_209/cpBody.c	2009-09-05 12:35:44.000000000 +0300
+++ chip/cpBody.c	2009-09-05 12:36:03.000000000 +0300
@@ -49,6 +49,7 @@
 	cpBodySetAngle(body, 0.0f);
 	body->w = 0.0f;
 	body->t = 0.0f;
+        body->gravity = 0.0f;
 	
 	body->v_bias = cpvzero;
 	body->w_bias = 0.0f;
diff -ruiN chip_209/cpBody.h chip/cpBody.h
--- chip_209/cpBody.h	2009-09-05 12:35:44.000000000 +0300
+++ chip/cpBody.h	2009-09-05 12:36:03.000000000 +0300
@@ -53,11 +53,13 @@
 	// Angular components of motion (angle, angular velocity, and torque)
 	// Always use cpBodySetAngle() to set the angle of the body as a and rot must agree.
 	cpFloat a, w, t;
+
+    cpFloat gravity;
 	
 	// Cached unit length vector representing the angle of the body.
 	// Used for fast vector rotation using cpvrotate().
 	cpVect rot;
-	
+
 	// *** User Definable Fields
 	
 	// User defined data pointer.
diff -ruiN chip_209/cpSpace.c chip/cpSpace.c
--- chip_209/cpSpace.c	2009-09-05 12:35:44.000000000 +0300
+++ chip/cpSpace.c	2009-09-05 12:36:03.000000000 +0300
@@ -550,7 +550,8 @@
 	cpFloat damping = cpfpow(1.0f/space->damping, -dt);
 	for(int i=0; i<bodies->num; i++){
 		cpBody *body = (cpBody *)bodies->arr[i];
-		body->velocity_func(body, space->gravity, damping, dt);
+                cpVect grav = cpv(0.0, space->gravity.y + body->gravity);
+		body->velocity_func(body, grav, damping, dt);
 	}
 
 	for(int i=0; i<arbiters->num; i++)
